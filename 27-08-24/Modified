*****QUESTION 1*******

Problem Statement: Medication Dosage Analysis
- Define a class: `Prescription` with the following properties:
- `PrescriptionID` (integer)
- `PatientName` (string)
- `MedicationName` (string)
- `Dosage` (double, in milligrams)
- Tasks:
1. Data Input:
- Read N `prescriptions` from the keyboard.
2. Find Maximum Dosage:
- Display the prescription with the highest dosage among the N `prescriptions`.
Solve in time complexity of O(N).
Dont use built-in C# sorting or LINQ.
3. Find Third Least Dosage:
- Display the prescription with the third least dosage among the N `prescriptions`.
Solve in time complexity of O(N).
Dont use built-in C# sorting or LINQ.
4. Sort Prescriptions by Medication Name:
- Implement and call your own sorting algorithm.
Dont use built-in C# sorting or LINQ.


*******ANSWER**********

****Program.cs(Used logging and exception handling)******


using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net;
using log4net.Config;

namespace Week4Assessment
{
    public class PrescriptionManager
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(PrescriptionManager));
        private static string connectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Week4Assessment;Integrated Security=True;";

        public class Prescription
        {
            public int PrescriptionID { get; set; }
            public string PatientName { get; set; }
            public string MedicationName { get; set; }
            public double Dosage { get; set; }
        }

        // Method to read prescriptions from the database
        public Prescription[] ReadPrescriptions(int numberOfPrescriptions)
        {
            Prescription[] prescriptions = new Prescription[numberOfPrescriptions];

            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = "SELECT PrescriptionID, PatientName, MedicationName, Dosage FROM Prescription";
                    SqlCommand cmd = new SqlCommand(query, conn);

                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();
                    for (int i = 0; i < prescriptions.Length; i++)
                    {
                        if (!reader.Read())
                        {
                            log.Info("[0101] Server Error: No more prescriptions found.");
                            throw new ServerException("[0101] Server Error.");
                        }
                        prescriptions[i] = new Prescription
                        {
                            PrescriptionID = (int)reader["PrescriptionID"],
                            PatientName = reader["PatientName"].ToString(),
                            MedicationName = reader["MedicationName"].ToString(),
                            Dosage = (double)reader["Dosage"]
                        };
                    }
                }
                log.Info("Successfully read prescriptions from the database.");
            }
            catch (SqlException ex)
            {
                log.Info($"[0102] Server Error: {ex.Message}");
                throw new ServerException($"[0102] Server Error. {ex.Message}");
            }
            catch (ServerException ex)
            {
                log.Info("ServerException occurred.");
                throw ex;
            }
            catch (Exception ex)
            {
                log.Info($"[0103] Server Error: {ex.Message}");
                throw new ServerException($"[0103] Server Error. {ex.Message}");
            }

            return prescriptions;
        }

        // Method to find the prescription with the maximum dosage
        public Prescription FindMaxDosage(Prescription[] prescriptions)
        {
            Prescription maxDosagePrescription = prescriptions[0];
            foreach (var prescription in prescriptions)
            {
                if (prescription.Dosage > maxDosagePrescription.Dosage)
                {
                    maxDosagePrescription = prescription;
                }
            }
            return maxDosagePrescription;
        }

        // Method to find the prescription with the third least dosage
        public Prescription FindThirdLeastDosage(Prescription[] prescriptions)
        {
            double first = double.MaxValue, second = double.MaxValue, third = double.MaxValue;
            Prescription thirdLeastDosagePrescription = null;

            foreach (var prescription in prescriptions)
            {
                if (prescription.Dosage < first)
                {
                    third = second;
                    second = first;
                    first = prescription.Dosage;
                }
                else if (prescription.Dosage < second)
                {
                    third = second;
                    second = prescription.Dosage;
                }
                else if (prescription.Dosage < third)
                {
                    third = prescription.Dosage;
                    thirdLeastDosagePrescription = prescription;
                }
            }
            return thirdLeastDosagePrescription;
        }

        // Method to sort prescriptions by Medication Name using Insertion Sort
        public void SortByMedicationName(Prescription[] prescriptions)
        {
            for (int i = 1; i < prescriptions.Length; i++)
            {
                Prescription key = prescriptions[i];
                int j = i - 1;

                while (j >= 0 && prescriptions[j].MedicationName.CompareTo(key.MedicationName) > 0)
                {
                    prescriptions[j + 1] = prescriptions[j];
                    j--;
                }
                prescriptions[j + 1] = key;
            }
        }

        // Method to display a prescription
        public void DisplayPrescription(Prescription prescription)
        {
            if (prescription != null)
            {
                log.Info($"Prescription ID: {prescription.PrescriptionID}, " +
                         $"Patient Name: {prescription.PatientName}, " +
                         $"Medication Name: {prescription.MedicationName}, " +
                         $"Dosage: {prescription.Dosage} mg");
            }
            else
            {
                log.Info("No prescription found.");
            }
        }

        // Custom exception class for server errors
        public class ServerException : Exception
        {
            public ServerException(string message) : base(message) { }
        }
    }

    public class Program
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(Program));

        public static void Main()
        {
            // Initialize log4net
            XmlConfigurator.Configure();

            PrescriptionManager prescriptionManager = new PrescriptionManager();
            int numberOfPrescriptions = 10; // You can adjust this number as needed

            // Read prescriptions from the database
            PrescriptionManager.Prescription[] prescriptions = null;
            try
            {
                prescriptions = prescriptionManager.ReadPrescriptions(numberOfPrescriptions);
            }
            catch (PrescriptionManager.ServerException ex)
            {
                log.Info($"Error: {ex.Message}");
                return; // Exit if there's a server error
            }

            // Find and display the prescription with the highest dosage
            PrescriptionManager.Prescription maxDosagePrescription = prescriptionManager.FindMaxDosage(prescriptions);
            log.Info("Prescription with the highest dosage:");
            prescriptionManager.DisplayPrescription(maxDosagePrescription);

            // Find and display the prescription with the third least dosage
            PrescriptionManager.Prescription thirdLeastDosagePrescription = prescriptionManager.FindThirdLeastDosage(prescriptions);
            log.Info("Prescription with the third least dosage:");
            prescriptionManager.DisplayPrescription(thirdLeastDosagePrescription);

            // Sort prescriptions by Medication Name and display them
            prescriptionManager.SortByMedicationName(prescriptions);
            log.Info("Prescriptions sorted by Medication Name:");
            foreach (var prescription in prescriptions)
            {
                prescriptionManager.DisplayPrescription(prescription);
            }
        }
    }
}

*****PrescriptionManagerTests.cs*****
