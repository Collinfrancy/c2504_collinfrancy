1. Cricket Ground Boundry Sides Distances from batsman (from Pavilion End)
        Leg Side 
        Off Side  
        Straight 
        Third Man  
    Compare two cricket grounds:
        find the shortest distance from each ground 
        and compare two ground based on shortest distance 
            check which is preferred ground for batsman 

    C#: CricketGround{ LegSideDistance: int, 
        OffSideDistace: int, 
        StraightDistance: int, 
        ThirdManDistance: int }
    - int FindShortestDistance()
        among four distance find min 
    - bool IsShortestDistanceGt(CricketGround other)     
    
    C3: UserOfCricketGround will compare two grounds 
        will say which ground is preferred ground 




using System;

class CricketGround
{
    public int LegSideDistance { get; set; }
    public int OffSideDistance { get; set; }
    public int StraightDistance { get; set; }
    public int ThirdManDistance { get; set; }

    public CricketGround(int legSide, int offSide, int straight, int thirdMan)
    {
        LegSideDistance = legSide;
        OffSideDistance = offSide;
        StraightDistance = straight;
        ThirdManDistance = thirdMan;
    }

    public int FindShortestDistance()
    {
        int[] distances = { LegSideDistance, OffSideDistance, StraightDistance, ThirdManDistance };
        return distances.Min();
    }


    public bool IsShortestDistanceGt(CricketGround other)
    {
        return this.FindShortestDistance() > other.FindShortestDistance();
    }

    public override string ToString()
    {
        return $"[LegSide={LegSideDistance}, OffSide={OffSideDistance}, Straight={StraightDistance}, ThirdMan={ThirdManDistance}, Shortest={FindShortestDistance()}]";
    }
}

internal class UserOfCricketGround
{
    static void Main(string[] args)
    {
        CricketGround ground1 = new CricketGround(75, 80, 65, 70);
        CricketGround ground2 = new CricketGround(78, 82, 60, 68);

        if (ground1.IsShortestDistanceGt(ground2))
        {
            Console.WriteLine($"Ground 1 {ground1} is less preferred than Ground 2 {ground2}");
        }
        else if (ground2.IsShortestDistanceGt(ground1))
        {
            Console.WriteLine($"Ground 1 {ground1} is more preferred than Ground 2 {ground2}");
        }
        else
        {
            Console.WriteLine($"Ground 1 {ground1} and Ground 2 {ground2} are equally preferred");
        }

        Console.ReadKey();
    }
}


2.  Circle { Radius: int }
        - float Circumference() 
        - bool IsCircumferenceGt(Circle other)
    TestCircle


class Circle
    {
        public int Radius { get; set; }

        public Circle(int radius)
        {
            Radius = radius;
        }

        public float Circumference()
        {
            return 2 * (float)Math.PI * Radius;
        }

        public bool IsCircumferenceGt(Circle other)
        {
            return this.Circumference() > other.Circumference();
        }

        public override string ToString()
        {
            return $"[Radius={Radius}, Circumference={Circumference():F2}]";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Circle circle1 = new Circle(5);
            Circle circle2 = new Circle(7);

            if (circle1.IsCircumferenceGt(circle2))
            {
                Console.WriteLine($"Circle 1 {circle1} has a greater circumference than Circle 2 {circle2}");
            }
            else if (circle1.Circumference() == circle2.Circumference())
            {
                Console.WriteLine("Both circles have equal circumferences.");
            }
            else
            {
                Console.WriteLine($"Circle 2 {circle2} has a greater circumference than Circle 1 {circle1}");
            }
        }
    }





op:

Ground 1 [LegSide=75, OffSide=80, Straight=65, ThirdMan=70, Shortest=65] is less preferred than Ground 2 [LegSide=78, OffSide=82, Straight=60, ThirdMan=68, Shortest=60]
-----------------------------------------------------------------------------------------------------------------



3.  BikeRaceTrack
        { Distance: int }
        - bool IsGt(BikeRaceTrack other)
    TestBikeRaceTrack




using System;

class BikeRaceTrack
{
    public int Distance { get; set; }

    public BikeRaceTrack(int distance)
    {
        Distance = distance;
    }

    // Method to compare if the current track's distance is greater than another track's distance
    public bool IsGt(BikeRaceTrack other)
    {
        return this.Distance > other.Distance;
    }

    public override string ToString()
    {
        return $"[Distance={Distance} km]";
    }
}
internal class TestBikeRaceTrack
{
    static void Main(string[] args)
    {
        BikeRaceTrack track1 = new BikeRaceTrack(100);
        BikeRaceTrack track2 = new BikeRaceTrack(120);

        Console.WriteLine($"Track 1: {track1}");
        Console.WriteLine($"Track 2: {track2}");

        if (track1.IsGt(track2))
        {
            Console.WriteLine($"Track 1 {track1} is longer than Track 2 {track2}");
        }
        else if (track2.IsGt(track1))
        {
            Console.WriteLine($"Track 1 {track1} is shorter than Track 2 {track2}");
        }
        else
        {
            Console.WriteLine($"Track 1 {track1} and Track 2 {track2} have equal distances");
        }

        Console.ReadKey();
    }
}




4.  ComplexNumber { Real: int, Imaginary: int}
        - ComplexNumber Add(ComplexNumber other)
    TestComplexNumber for addition 
        (3 + i4)
     +  (5 + i3) 
     =  (8 + i7)

using System;

class ComplexNumber
{
    public int Real { get; set; }
    public int Imaginary { get; set; }

    public ComplexNumber(int real, int imaginary)
    {
        Real = real;
        Imaginary = imaginary;
    }

    // Method to add two complex numbers
    public ComplexNumber Add(ComplexNumber other)
    {
        int newReal = this.Real + other.Real;
        int newImaginary = this.Imaginary + other.Imaginary;
        return new ComplexNumber(newReal, newImaginary);
    }

    public override string ToString()
    {
        return $"{Real} + i{Imaginary}";
    }
}
internal class TestComplexNumber
{
    static void Main(string[] args)
    {
        ComplexNumber number1 = new ComplexNumber(3, 4);
        ComplexNumber number2 = new ComplexNumber(5, 3);

        Console.WriteLine($"Number 1: {number1}");
        Console.WriteLine($"Number 2: {number2}");

        ComplexNumber result = number1.Add(number2);

        Console.WriteLine($"Result of addition: {number1} + {number2} = {result}");

        Console.ReadKey();
    }
}
